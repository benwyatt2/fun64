{
 "_blog_json": {
  "dir": "blog/.",
  "posts_per_page": 12
 },
 "_blog_page_body": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">You are reading: <span>Fun64 dev blog</span></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div>\n</div>\n\n<div class=\"blog_list_wrap\">{_list:blog_list}</div>\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_page_older:link_older_page}</div><div class=\"page_link\">{_blog_page_newer:link_newer_page}</div>\n</div>\n\n",
 "_blog_post_body_many": "<a href=\"{_dirname}\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t<span class=\"blog_post_snip\">{_blog_post_body}</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n</a>\n\n",
 "_blog_post_body_one": "<div class=\"nav_wrap\"><div class=\"nav\">You are reading: <a href=\"{_root}blog\">Fun64 dev blog</a></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div></div>\n<div class=\"blog_wrap\">\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t{_blog_post_body}\t\n</div>\n\n{_blog_post_json.fun_file&fun_blog_embed}\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_post_older:link_older_post}</div><div class=\"page_link\">{_blog_post_newer:link_newer_post}</div>\n</div>\n\n",
 "_dirname": "/fun64/blog",
 "_filename": "/fun64/blog/index.html",
 "_flags": {
  "body": {
   "trim": "ends"
  },
  "css": {
   "same": "append"
  },
  "head": {
   "trim": "ends"
  },
  "html": {
   "trim": "ends"
  },
  "title": {
   "trim": "ends"
  }
 },
 "_list": [
  {
   "_blog_json": {
    "dir": "blog/.",
    "posts_per_page": 12
   },
   "_blog_page_body": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">You are reading: <span>Fun64 dev blog</span></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div>\n</div>\n\n<div class=\"blog_list_wrap\">{_list:blog_list}</div>\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_page_older:link_older_page}</div><div class=\"page_link\">{_blog_page_newer:link_newer_page}</div>\n</div>\n\n",
   "_blog_post_body": "<p>Chatdown is  a markdown like text format for describing chat trees, the \nidea is to have all the logic somewhere else and just use this for \ndescribing the relationship and hierarchy of the text.</p>\n<p>The bad news is this means you have to label each part of the chat with \nreasonable ids so the code can find it. Naming things is hard and has\nto be done.</p>\n<p>Mostly the file is interpreted as paragraphs similar to markdowns \nparagraphs separated by empty lines, between these paragraphs lines \nbeginning with one of the special characters #&lt;&gt;= switch the mode, and \nassign where the next set of paragraphs will be stored.</p>\n<p>Following immediately on from these special characters with no white \nspace in between are the id labels, these are used to name each set of \nparagraphs and allow references between them. This is the most complex \npart of the chatdown format.</p>\n<p>A chat is started by beginning a line with a # this can be thought of \nas the talky part of an NPCs brain and a chatdown file contains \nmultiple chats. These chats can reference each other, for example one \nNPC can check what you have told another NPC.</p>\n<p>The first paragraph of a #chat is the display name of the NPC, the rest \nof the paragraphs are a longer description. More data can also be \nassociated with the NPC here but I will go into that another time.</p>\n<p>Responses are started with a &lt; and they belong to the current chat, \nthese are the things that an NPC says, for instance, &lt;welcome is the \nfirst thing an NPC says when you talk to them.</p>\n<p>Decisions are your choices that can be made after an NPC talks, started \nwith a &gt; these are stored in the current response and are primarily \nlinks to another response.</p>\n<p>With decisions the first paragraph is displayed and the remaining \nparagraphs can be used as the spoken out loud dialogue. Some styles of \ndialogue writing use this form, others only need the first paragraph.</p>\n<p>Proxies are variables associated with this chat, they are assigned by \nlines beginning with an = and all paragraphs following are given to \nthis proxy. Proxies way be set inside any of the other states and the \nchange will happen as you progress through the chat. This allows us to \ntrack decisions by changing a proxy inside the decision.</p>\n<p>Proxies may be expanded inside paragraphs or even option names by using \nsquiggly brackets like so {proxyname}, more complicated expansions will \nbe added later if needed.</p>\n<p>This is just an overview and its best we explain with some code, so \ntake a look at the following chatdown example which you will find \nembedded at the top of this fun64 file. The code to parse and display \nthis format is included, probably best you do not look too closely at \nthat bit :)</p>\n<p>Since chatdown took some time to formalise, it is also going to take \nmore than one short post to explain, expect a follow up with a more \ncomplex example.</p>\n",
   "_blog_post_body_many": "<a href=\"{_dirname}\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t<span class=\"blog_post_snip\">{_blog_post_body}</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n</a>\n\n",
   "_blog_post_body_one": "<div class=\"nav_wrap\"><div class=\"nav\">You are reading: <a href=\"{_root}blog\">Fun64 dev blog</a></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div></div>\n<div class=\"blog_wrap\">\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t{_blog_post_body}\t\n</div>\n\n{_blog_post_json.fun_file&fun_blog_embed}\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_post_older:link_older_post}</div><div class=\"page_link\">{_blog_post_newer:link_newer_post}</div>\n</div>\n\n",
   "_blog_post_json": {
    "author": "xriss",
    "datedash": "2017-03-19",
    "datetime": [
     2017,
     3,
     19,
     0,
     0,
     0
    ],
    "fun_file": "chatdown.fun.lua",
    "fun_height": "512px",
    "title": "Chatdown",
    "unixtime": 1489881600
   },
   "_blog_post_older": "/fun64/blog/2017-02-12-hello-world/",
   "_body": "<a href=\"/fun64/blog/2017-03-19-chatdown\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">Chatdown</span>\n\t<span class=\"blog_post_snip\"><p>Chatdown is  a markdown like text format for describing chat trees, the \nidea is to have all the logic somewhere else and just use this for \ndescribing the relationship and hierarchy of the text.</p>\n<p>The bad news is this means you have to label each part of the chat with \nreasonable ids so the code can find it. Naming things is hard and has\nto be done.</p>\n<p>Mostly the file is interpreted as paragraphs similar to markdowns \nparagraphs separated by empty lines, between these paragraphs lines \nbeginning with one of the special characters #&lt;&gt;= switch the mode, and \nassign where the next set of paragraphs will be stored.</p>\n<p>Following immediately on from these special characters with no white \nspace in between are the id labels, these are used to name each set of \nparagraphs and allow references between them. This is the most complex \npart of the chatdown format.</p>\n<p>A chat is started by beginning a line with a # this can be thought of \nas the talky part of an NPCs brain and a chatdown file contains \nmultiple chats. These chats can reference each other, for example one \nNPC can check what you have told another NPC.</p>\n<p>The first paragraph of a #chat is the display name of the NPC, the rest \nof the paragraphs are a longer description. More data can also be \nassociated with the NPC here but I will go into that another time.</p>\n<p>Responses are started with a &lt; and they belong to the current chat, \nthese are the things that an NPC says, for instance, &lt;welcome is the \nfirst thing an NPC says when you talk to them.</p>\n<p>Decisions are your choices that can be made after an NPC talks, started \nwith a &gt; these are stored in the current response and are primarily \nlinks to another response.</p>\n<p>With decisions the first paragraph is displayed and the remaining \nparagraphs can be used as the spoken out loud dialogue. Some styles of \ndialogue writing use this form, others only need the first paragraph.</p>\n<p>Proxies are variables associated with this chat, they are assigned by \nlines beginning with an = and all paragraphs following are given to \nthis proxy. Proxies way be set inside any of the other states and the \nchange will happen as you progress through the chat. This allows us to \ntrack decisions by changing a proxy inside the decision.</p>\n<p>Proxies may be expanded inside paragraphs or even option names by using \nsquiggly brackets like so {proxyname}, more complicated expansions will \nbe added later if needed.</p>\n<p>This is just an overview and its best we explain with some code, so \ntake a look at the following chatdown example which you will find \nembedded at the top of this fun64 file. The code to parse and display \nthis format is included, probably best you do not look too closely at \nthat bit :)</p>\n<p>Since chatdown took some time to formalise, it is also going to take \nmore than one short post to explain, expect a follow up with a more \ncomplex example.</p>\n</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ xriss</span>\n\t\t<span><i>2017-03-19</i></span>\n\t</span>\n</a>\n\n",
   "_dirname": "/fun64/blog/2017-03-19-chatdown",
   "_filename": "/fun64/blog/2017-03-19-chatdown/index.html",
   "_flags": {
    "_blog_post_body": {
     "form": "markdown"
    },
    "body": {
     "trim": "ends"
    },
    "css": {
     "same": "append"
    },
    "head": {
     "trim": "ends"
    },
    "html": {
     "trim": "ends"
    },
    "title": {
     "trim": "ends"
    }
   },
   "_root": "/fun64/",
   "_sourcename": "blog/2017-03-19-chatdown/index.html",
   "blog_list": "{_it._body}\n\n",
   "body": "{_blog_post_body_one}",
   "css": "\n*\t\t{box-sizing:border-box;}\nbody\t{background:#f7f4fd; font-family:mono, sans-serif; font-size:16px; line-height:24px; color:#3a3a3a; width:100%; padding:50px; margin:0px auto;}\nh1\t\t{font-size:4em; font-weight:normal; color:#1400ff;}\nh2\t\t{font-size:2em; font-weight:normal;}\n\na\t\t{color:#1400ff;}\n\na.bar\t\t{color:#f7f4fd; background-color:#3a3a3a; border-radius:4px; padding:5px; text-decoration:none; border-bottom:none;}\na.bar:hover\t{background-color:#1400ff; border-bottom:none; cursor:pointer;}\n\n.nav_wrap\t{width:1024px; margin:auto;}\n.nav\t\t{display:inline-block; vertical-align:top; width:50%; border-bottom:1px dashed #1400ff; padding-bottom:20px;}\n.nav:nth-of-type(2)\t{text-align:right;}\n\n.page_link\t{display:inline-block; width:50%; vertical-align:top; margin-top:80px;}\n.page_link:nth-of-type(2)\t{text-align:right;}\n\n\n/*\tINDEX styles\n\t============================================= */\n.fun_bits\t\t{width:1024px; margin:auto; font-size:14px; line-height:16px; color:#1400ff;}\n\n\n/*\tFOOTER styles\n\t============================================= */\n\t\n.footer_wrap\t{border-top:1px dashed #1400ff; padding-top:20px; width:1024px; margin:auto; margin-top:40px;}\n.footer_wrap p\t{padding:5px 0;}\n.footer:nth-of-type(1) p:nth-of-type(1)\t{font-size:20px; margin-right:5em;}\n\n.footer\t\t\t{display:inline-block; vertical-align:top; width:70%;}\n.footer:nth-of-type(2)\t{width:30%;}\n\na.home\t\t\t{font-weight:bold; color:#1400ff; text-decoration:none;}\na.home:hover\t{text-decoration:underline;}\n\n\n/*\tBLOG styles\n\t============================================= */\n\nspan.blog_post_title{display:block; font-size:42px; line-height:46px; font-weight:bold;}\nspan.blog_post_user\t{display:block; font-size:12px; margin-bottom:20px;}\n\n.blog_list_wrap\t\t{width:1024px; margin:0 auto;}\n.line\t\t\t\t{border-top:1px dashed #1400ff; margin-top:40px; margin-bottom:40px; position:relative;}\n.blog_info\t\t\t{position:absolute; right:10px; top:10px;}\n\n.blog_wrap\t\t\t{width:700px; margin:auto; margin-top:40px; font-size:18px; line-height:26px; border:0;}\n\n\n/*\tBLOG post styles\n\t============================================= */\n\na.blog_post_link\t{display:inline-block; text-decoration:none; width:320px; height:300px; overflow:hidden; vertical-align:top; padding:20px; box-sizing:border-box; background-color:#fff; color:#3a3a3a; margin-top:40px; margin-right:20px; position:relative; border:8px solid #efefef; border-radius:6px;}\na.blog_post_link:nth-of-type(odd)\t{background-color:#1400ff; color:#fff;}\na.blog_post_link:nth-of-type(3)\t\t{margin-right:0;}\na.blog_post_link:hover\t{background-color:rgba(0,0,0,0.4); color:#fff;}\n\na.blog_post_link span.blog_post_title\t{display:block; font-size:21px; line-height:30px; font-weight:bold;}\na.blog_post_link span.blog_post_snip\t{display:block; height:180px; overflow:hidden;}\na.blog_post_link span.blog_post_user\t{position:absolute; bottom:0; left:0; background-color:#3a3a3a; color:#fff; width:320px; padding:10px 20px; font-size:12px; margin:0;}\n\n\n/*\tCODE EMBED\n\t============================================= */\n\n.blog_embed_wrap\t{margin:0 auto; margin-top:40px;}\n.blog_embed_head\t{width:700px; margin:auto;}\n.blog_embed_head div{width:50%; display:inline-block; vertical-align:top; border-top:1px dashed #1400ff; padding-top:40px; margin-bottom:20px;}\n.blog_embed_head div:nth-of-type(2)\t{text-align:right;}\n\n\n.blog_code_wrap\t\t{width:1024px; font-size:14px; margin:0 auto; position:relative;}\npre.lang-lua\t\t{height:100%; overflow:scroll; padding:16px; padding-top:0;}\na.raw_src\t\t\t{display:block; position:absolute; right:15px; top:0; color:#444; text-decoration:none; background-color:#fff; padding:5px 10px; text-align:center; z-index:666;}\na.raw_src:hover\t\t{color:#1400ff;}\n\n#gamecake_container, #gamecake_canvas\t{width:100%; height:100%; position:absolute;}\n.code_embed_wrap\t{width:1024px; height:100%; overflow:hidden; margin:0 auto; margin-top:14px;}\n.code_embed\t\t\t{width:100%; height:100%; position:relative; background-color:#000;}\n.loading\t\t\t{position:absolute; top:40px; right:50%; color:#fff;}\n\n\n/*\tMOBILE post styles\n\t============================================= */\n@media screen and (max-width:1024px) {\n\n\tbody\t\t{padding:0;}\t\n\tpre\t\t\t{margin:0 auto;}\n\t.fun_bits\t{font-size:12px;}\n\t.fun_bits, .nav_wrap, .footer_wrap\t{width:960px; margin:0 auto; padding:50px;}\n\t.blog_list_wrap, a.blog_post_link\t{width:860px;}\n\t\n\t.nav\t\t\t\t{font-size:38px; line-height:54px; min-height:130px;}\n\t.footer, .footer:nth-of-type(2)\t\t\t{display:block; width:100%;}\n\t\n\t.footer p, .footer:nth-of-type(1) p:nth-of-type(1), .blog_wrap p\t\t{margin:40px 0; font-size:18px; line-height:54px;}\n\t\n\ta.blog_post_link\t{display:block; margin:0 auto; margin-bottom:40px; font-size:38px; line-height:54px;}\n\ta.blog_post_link span.blog_post_title\t{font-size:48px; line-height:68px;}\n\ta.blog_post_link span.blog_post_snip\t{height:200px;}\n\ta.blog_post_link span.blog_post_user\t{font-size:24px; width:960px;}\n}\n",
   "footer": "<div class=\"footer_wrap\">\n\t<div class=\"footer\">\n\t\t<p>\n\t\t\t<a href=\"{_root}\" class=\"home\">Fun64</a> is a simple game engine designed \n\t\t\tfor single file game sketches.\n\t\t</p>\n\n\t\t<p>\n\t\t\tSee <a href=\"{_root}blog\" class=\"home\">dev blog</a> for updates and examples or \n\t\t\tfind us on <a href=\"https://github.com/xriss/fun64\" class=\"home\">github</a>.\n\t\t</p>\n\t</div><div class=\"footer\">\n\t\t<p>\n\t\t\t<a \n\t\t\thref=\"https://gist.github.com/search?q=fun64+lua\" class=\"home\">gists</a> are the perfect \n\t\t\tway of sharing fun64 files.\n\t\t</p>\n\n\t\t<p>\n\t\t\t<a href=\"{_root}run\" class=\"home\">run</a> provides a way \n\t\t\tof playing them in a browser.\n\t\t</p>\n\t</div>\n</div>\n",
   "fun_blog_code": "<div class=\"blog_code_wrap\" id=\"code_src\" style=\"display:none;\">\n\t<a href=\"{_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View raw lua source</a>\n\t<pre id=\"code{_dirname}\" class=\"lang-lua\"></pre>\n\t<script>\n\t\t$.get(\"{_dirname}/{_blog_post_json.fun_file}\", function(data){\n\t\t\t$(\"[id=\\\"code{_dirname}\\\"]\").text(data).addClass(\"prettyprint\");\n\t\t\tPR.prettyPrint();\n\t\t});\n\t</script>\n</div>\n",
   "fun_blog_embed": "\n<div class=\"blog_embed_wrap\">\n\n\t<div class=\"blog_embed_head\">\n\t\t<div><a class=\"bar\" onclick=\"toggle_code()\">Toggle sourcecode</a></div><div><a class=\"bar\" onclick=\"toggle_fun()\">Run program</a></div>\n\t</div>\n\t\n\t<script>\n\t\tfunction toggle_code() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_src');\n\t\t\tvar y = document.getElementById('code_fun');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction toggle_fun() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_fun');\n\t\t\tvar y = document.getElementById('code_src');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t\tload_fun();\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t</script>\n\t\n\t\n\t{fun_blog_code}\n\n\t<div class=\"code_embed_wrap\" id=\"code_fun\" style=\"display:none;\"><!--\trun program\t-->\n\t\t<div class=\"code_embed\">\n\t\t\t<a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View fullscreen</a>\n\t\t\t<div class=\"loading\" id=\"loading_pct\">Loading...Please wait...^.^=</div>\n\t\t\t<script id=\"gamecake_init_lua\" type=\"text/lua\" >--<![CDATA[\n\n\t\t\tlocal hx,hy,ss=128,128,3\n\n\t\t\tlocal opts={\n\t\t\t\ttimes=true, -- request simple time keeping samples\n\n\t\t\t\twidth=hx*ss,\t-- display basics\n\t\t\t\theight=hy*ss,\n\t\t\t\tscreen_scale=ss,\n\t\t\t--\tshow=\"full\",\n\t\t\t\ttitle=\"fun\",\n\t\t\t\tstart=\"wetgenes.gamecake.fun.main\",\n\t\t\t\tfun=\"start\",\n\t\t\t\tfps=60,\n\t\t\t\t... -- include commandline opts\n\t\t\t}\n\n\t\t\tmath.randomseed( os.time() ) -- try and randomise a little bit better\n\n\t\t\toven=require(\"wetgenes.gamecake.oven\").bake(opts).preheat()\n\n\t\t\treturn oven:serv()\n\n\t\t--]]></script>\n\n\n\t\t\t<div id=\"gamecake_container\">\n\t\t\t\t<canvas id=\"gamecake_canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\n\t\t\t\t\t\tvar gamecake_post;\n\t\t\t\t\t\tvar Module;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar resize=function(){\n\t\t\t\t\t\t\tvar e=document.getElementById(\"gamecake_container\");\n\t\t\t\t\t\t\tvar w=parseFloat(window.getComputedStyle(e).width);\n\t\t\t\t\t\t\tvar h=parseFloat(window.getComputedStyle(e).height);\n\t\t\t\t\t\t\tModule.setCanvasSize(w,h);\n\t\t\t\t\t\t\tif(gamecake_post)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").hardcore.resize(nil,'+w+','+h+')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar gamecake_start=function() {\n\n\t\t\t\t//initialise lua\n\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").emcc_start({})');\n\n\t\t\t\t// create a pulse function and call it every frame\n\t\t\t\t\t\t\tvar pulse;\n\t\t\t\t\t\t\tvar resize_wait=16;\n\t\t\t\t\t\t\tpulse=function() {\n\t\t\t\t\t\t\t\trequestAnimationFrame(pulse); // we need to always ask to be called again\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','return gamecake_pulse()');\n\t\t\t\t\t\t\t\tif(resize_wait>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(--resize_wait==0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"resioz\");\n\t\t\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trequestAnimationFrame(pulse); // start the updates\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar show_progress=function(n)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.show_progress_max=window.show_progress_max || 0;\n\t\t\t\t\t\t\tif(window.show_progress_max<n) { window.show_progress_max=n; }\n\t\t\t\t\t\t\tvar pct=Math.floor(100*(1-(n/window.show_progress_max)));\n\t\t\t\t\t\t\tconsole.log(\"GameCake Loading \"+pct+\"%\");\n//\t\t\t\t\t\t\tvar x = document.getElementById('loading_pct');\n//\t\t\t\t\t\t\tx.innerHTML = \"GameCake Loading \"+pct+\"%\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction load_fun() {\n\t\t\t\t\t\t\tload_fun=function(){\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\twindow.addEventListener(\"resize\",resize);\n\t\t\t\t\t\t\tModule={};\n\t\t\t\t\t\t\tModule.canvas=document.getElementById(\"gamecake_canvas\");\n\t\t\t\t\t\t\tModule.canvas_resize=resize;\n\t\t\t\t\t\t\tModule.memoryInitializerPrefixURL=\"{_root}exe/\";\n\t\t\t\t\t\t\tModule['_main'] = function() {\n\t\t\t\t\t\t\t\tgamecake_post = Module.cwrap('main_post', 'int', ['string','string']);\n\t\t\t\t\t\t\t\tgamecake_start();\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"preInit\"] = function() {\n\t\t\t\t\t\t\t\tFS.mkdir(\"/lua\");\n\t\t\t\t\t\t\t\tFS.createPreloadedFile('/', \"start.fun.lua\", \"{_dirname}/{_blog_post_json.fun_file}\", true, false);\n\t\t\t\t\t\t\t\tFS.writeFile( \"/lua/init.lua\" , document.getElementById(\"gamecake_init_lua\").innerHTML );\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"monitorRunDependencies\"]=show_progress;\n\n\n\t\t\t\t\t\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\t\t\t\t\t\t// space and arrow keys\n\t\t\t\t\t\t\t\tif([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar script = document.createElement('script');\n\t\t\t\t\t\t\tscript.src = \"{_root}exe/gamecake.js\";\n\n\t\t\t\t\t\t\tdocument.head.appendChild(script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>\n\n</div>\n",
   "fun_blog_link": "\n<div class=\"blog_link_wrap\">\n\t<div class=\"blog_embed_head\">\n\t\tCheckout the Fun64 <a href=\"{_dirname}/{_blog_post_json.fun_file}\">lua source file</a> or view the result <a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\">fullscreen</a>.\n\t</div>\n\t{fun_blog_code}\n</div>\n",
   "head": "<title>{title}</title>\n<style>\n{css}\n</style>\n<script\tsrc=\"{_root}js/jquery-3.1.1.min.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/prettify.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/lang-lua.js\" ></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{_root}js/google-code-prettify/skins/sons-of-obsidian.css\" />",
   "html": "<html>\n<head>{head}</head>\n<body>{body}{footer}</body>\n</html>",
   "link_newer_page": "<a href=\"{_it}\">Newer posts</a>\n\n",
   "link_newer_post": "<a href=\"{_it}\">Newer post</a>\n\n",
   "link_older_page": "<a href=\"{_it}\">Older posts</a>\n",
   "link_older_post": "<a href=\"{_it}\">Older post</a>\n",
   "this_chunk_is_not_used": "<div class=\"blog_wrap\">\n\t<div class=\"blog_info\"><a href=\"{_dirname}\">{_blog_post_json.title}</a> by {_blog_post_json.author} on {_blog_post_json.datedash}</div>\n\t{_blog_post_body}\n\t{_blog_post_json.fun_file&fun_blog_link}\n</div>\n",
   "title": "{_blog_post_json.title}"
  },
  {
   "_blog_json": {
    "dir": "blog/.",
    "posts_per_page": 12
   },
   "_blog_page_body": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">You are reading: <span>Fun64 dev blog</span></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div>\n</div>\n\n<div class=\"blog_list_wrap\">{_list:blog_list}</div>\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_page_older:link_older_page}</div><div class=\"page_link\">{_blog_page_newer:link_newer_page}</div>\n</div>\n\n",
   "_blog_post_body": "<p>Apparently if your hello world example is longer than a couple of lines \nthen you are open to ridicule.</p>\n<p>I suspect people who say this are blissfully unaware exactly what _main \ngets up to before your code runs and lets not even think about C++.</p>\n<p>Still it helps to remove as much gubbins as possible so the code that&#39;s \nrunning becomes obvious. Fun64 is built around the idea that you should \ndefine the hardware before the program runs so lets hide all that away \ninside a builtin function that will set you up a basic looking screen \nto work with.</p>\n<p>Introducing the configurator, this function will provide various setups \ndepending on the mode requested and also provide a main function that \nwill allow you to provide a single update function rather than dealing \nwith more complexities. A single update function is less optimal but a \nperfectly reasonable way to write short bits of test code.</p>\n<p>So far the only mode we have is &quot;fun64&quot; which will get you a 60fps \n320x240 screen with three layers and the Swanky32 palette. The three \nlayers gives us a copper background, a tile+sprite foreground and \nfinally a text overlay on the very top. For graphical memory we have a \n64x64 area of 8x8 tiles (4096 in total) and we auto upload the 4x8 \nfun64 font to the very first line for use by the text layer.</p>\n<p>NB: If you clobber this top line all your text will go funny, just like \non real hardware.</p>\n<p>The main point of the layers is so we can have drop shadows between \nthem, the text layer on top gives us some very cheap 80s looking text \nmenus when used with solid blocks of background color.</p>\n",
   "_blog_post_body_many": "<a href=\"{_dirname}\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t<span class=\"blog_post_snip\">{_blog_post_body}</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n</a>\n\n",
   "_blog_post_body_one": "<div class=\"nav_wrap\"><div class=\"nav\">You are reading: <a href=\"{_root}blog\">Fun64 dev blog</a></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div></div>\n<div class=\"blog_wrap\">\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t{_blog_post_body}\t\n</div>\n\n{_blog_post_json.fun_file&fun_blog_embed}\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_post_older:link_older_post}</div><div class=\"page_link\">{_blog_post_newer:link_newer_post}</div>\n</div>\n\n",
   "_blog_post_json": {
    "author": "xriss",
    "datedash": "2017-02-12",
    "datetime": [
     2017,
     2,
     12,
     0,
     0,
     0
    ],
    "fun_file": "helloworld.fun.lua",
    "fun_height": "512px",
    "title": "Hello World!",
    "unixtime": 1486857600
   },
   "_blog_post_newer": "/fun64/blog/2017-03-19-chatdown/",
   "_blog_post_older": "/fun64/blog/2017-01-27-comic-test/",
   "_body": "<a href=\"/fun64/blog/2017-02-12-hello-world\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">Hello World!</span>\n\t<span class=\"blog_post_snip\"><p>Apparently if your hello world example is longer than a couple of lines \nthen you are open to ridicule.</p>\n<p>I suspect people who say this are blissfully unaware exactly what _main \ngets up to before your code runs and lets not even think about C++.</p>\n<p>Still it helps to remove as much gubbins as possible so the code that&#39;s \nrunning becomes obvious. Fun64 is built around the idea that you should \ndefine the hardware before the program runs so lets hide all that away \ninside a builtin function that will set you up a basic looking screen \nto work with.</p>\n<p>Introducing the configurator, this function will provide various setups \ndepending on the mode requested and also provide a main function that \nwill allow you to provide a single update function rather than dealing \nwith more complexities. A single update function is less optimal but a \nperfectly reasonable way to write short bits of test code.</p>\n<p>So far the only mode we have is &quot;fun64&quot; which will get you a 60fps \n320x240 screen with three layers and the Swanky32 palette. The three \nlayers gives us a copper background, a tile+sprite foreground and \nfinally a text overlay on the very top. For graphical memory we have a \n64x64 area of 8x8 tiles (4096 in total) and we auto upload the 4x8 \nfun64 font to the very first line for use by the text layer.</p>\n<p>NB: If you clobber this top line all your text will go funny, just like \non real hardware.</p>\n<p>The main point of the layers is so we can have drop shadows between \nthem, the text layer on top gives us some very cheap 80s looking text \nmenus when used with solid blocks of background color.</p>\n</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ xriss</span>\n\t\t<span><i>2017-02-12</i></span>\n\t</span>\n</a>\n\n",
   "_dirname": "/fun64/blog/2017-02-12-hello-world",
   "_filename": "/fun64/blog/2017-02-12-hello-world/index.html",
   "_flags": {
    "_blog_post_body": {
     "form": "markdown"
    },
    "body": {
     "trim": "ends"
    },
    "css": {
     "same": "append"
    },
    "head": {
     "trim": "ends"
    },
    "html": {
     "trim": "ends"
    },
    "title": {
     "trim": "ends"
    }
   },
   "_root": "/fun64/",
   "_sourcename": "blog/2017-02-12-hello-world/index.html",
   "blog_list": "{_it._body}\n\n",
   "body": "{_blog_post_body_one}",
   "css": "\n*\t\t{box-sizing:border-box;}\nbody\t{background:#f7f4fd; font-family:mono, sans-serif; font-size:16px; line-height:24px; color:#3a3a3a; width:100%; padding:50px; margin:0px auto;}\nh1\t\t{font-size:4em; font-weight:normal; color:#1400ff;}\nh2\t\t{font-size:2em; font-weight:normal;}\n\na\t\t{color:#1400ff;}\n\na.bar\t\t{color:#f7f4fd; background-color:#3a3a3a; border-radius:4px; padding:5px; text-decoration:none; border-bottom:none;}\na.bar:hover\t{background-color:#1400ff; border-bottom:none; cursor:pointer;}\n\n.nav_wrap\t{width:1024px; margin:auto;}\n.nav\t\t{display:inline-block; vertical-align:top; width:50%; border-bottom:1px dashed #1400ff; padding-bottom:20px;}\n.nav:nth-of-type(2)\t{text-align:right;}\n\n.page_link\t{display:inline-block; width:50%; vertical-align:top; margin-top:80px;}\n.page_link:nth-of-type(2)\t{text-align:right;}\n\n\n/*\tINDEX styles\n\t============================================= */\n.fun_bits\t\t{width:1024px; margin:auto; font-size:14px; line-height:16px; color:#1400ff;}\n\n\n/*\tFOOTER styles\n\t============================================= */\n\t\n.footer_wrap\t{border-top:1px dashed #1400ff; padding-top:20px; width:1024px; margin:auto; margin-top:40px;}\n.footer_wrap p\t{padding:5px 0;}\n.footer:nth-of-type(1) p:nth-of-type(1)\t{font-size:20px; margin-right:5em;}\n\n.footer\t\t\t{display:inline-block; vertical-align:top; width:70%;}\n.footer:nth-of-type(2)\t{width:30%;}\n\na.home\t\t\t{font-weight:bold; color:#1400ff; text-decoration:none;}\na.home:hover\t{text-decoration:underline;}\n\n\n/*\tBLOG styles\n\t============================================= */\n\nspan.blog_post_title{display:block; font-size:42px; line-height:46px; font-weight:bold;}\nspan.blog_post_user\t{display:block; font-size:12px; margin-bottom:20px;}\n\n.blog_list_wrap\t\t{width:1024px; margin:0 auto;}\n.line\t\t\t\t{border-top:1px dashed #1400ff; margin-top:40px; margin-bottom:40px; position:relative;}\n.blog_info\t\t\t{position:absolute; right:10px; top:10px;}\n\n.blog_wrap\t\t\t{width:700px; margin:auto; margin-top:40px; font-size:18px; line-height:26px; border:0;}\n\n\n/*\tBLOG post styles\n\t============================================= */\n\na.blog_post_link\t{display:inline-block; text-decoration:none; width:320px; height:300px; overflow:hidden; vertical-align:top; padding:20px; box-sizing:border-box; background-color:#fff; color:#3a3a3a; margin-top:40px; margin-right:20px; position:relative; border:8px solid #efefef; border-radius:6px;}\na.blog_post_link:nth-of-type(odd)\t{background-color:#1400ff; color:#fff;}\na.blog_post_link:nth-of-type(3)\t\t{margin-right:0;}\na.blog_post_link:hover\t{background-color:rgba(0,0,0,0.4); color:#fff;}\n\na.blog_post_link span.blog_post_title\t{display:block; font-size:21px; line-height:30px; font-weight:bold;}\na.blog_post_link span.blog_post_snip\t{display:block; height:180px; overflow:hidden;}\na.blog_post_link span.blog_post_user\t{position:absolute; bottom:0; left:0; background-color:#3a3a3a; color:#fff; width:320px; padding:10px 20px; font-size:12px; margin:0;}\n\n\n/*\tCODE EMBED\n\t============================================= */\n\n.blog_embed_wrap\t{margin:0 auto; margin-top:40px;}\n.blog_embed_head\t{width:700px; margin:auto;}\n.blog_embed_head div{width:50%; display:inline-block; vertical-align:top; border-top:1px dashed #1400ff; padding-top:40px; margin-bottom:20px;}\n.blog_embed_head div:nth-of-type(2)\t{text-align:right;}\n\n\n.blog_code_wrap\t\t{width:1024px; font-size:14px; margin:0 auto; position:relative;}\npre.lang-lua\t\t{height:100%; overflow:scroll; padding:16px; padding-top:0;}\na.raw_src\t\t\t{display:block; position:absolute; right:15px; top:0; color:#444; text-decoration:none; background-color:#fff; padding:5px 10px; text-align:center; z-index:666;}\na.raw_src:hover\t\t{color:#1400ff;}\n\n#gamecake_container, #gamecake_canvas\t{width:100%; height:100%; position:absolute;}\n.code_embed_wrap\t{width:1024px; height:100%; overflow:hidden; margin:0 auto; margin-top:14px;}\n.code_embed\t\t\t{width:100%; height:100%; position:relative; background-color:#000;}\n.loading\t\t\t{position:absolute; top:40px; right:50%; color:#fff;}\n\n\n/*\tMOBILE post styles\n\t============================================= */\n@media screen and (max-width:1024px) {\n\n\tbody\t\t{padding:0;}\t\n\tpre\t\t\t{margin:0 auto;}\n\t.fun_bits\t{font-size:12px;}\n\t.fun_bits, .nav_wrap, .footer_wrap\t{width:960px; margin:0 auto; padding:50px;}\n\t.blog_list_wrap, a.blog_post_link\t{width:860px;}\n\t\n\t.nav\t\t\t\t{font-size:38px; line-height:54px; min-height:130px;}\n\t.footer, .footer:nth-of-type(2)\t\t\t{display:block; width:100%;}\n\t\n\t.footer p, .footer:nth-of-type(1) p:nth-of-type(1), .blog_wrap p\t\t{margin:40px 0; font-size:18px; line-height:54px;}\n\t\n\ta.blog_post_link\t{display:block; margin:0 auto; margin-bottom:40px; font-size:38px; line-height:54px;}\n\ta.blog_post_link span.blog_post_title\t{font-size:48px; line-height:68px;}\n\ta.blog_post_link span.blog_post_snip\t{height:200px;}\n\ta.blog_post_link span.blog_post_user\t{font-size:24px; width:960px;}\n}\n",
   "footer": "<div class=\"footer_wrap\">\n\t<div class=\"footer\">\n\t\t<p>\n\t\t\t<a href=\"{_root}\" class=\"home\">Fun64</a> is a simple game engine designed \n\t\t\tfor single file game sketches.\n\t\t</p>\n\n\t\t<p>\n\t\t\tSee <a href=\"{_root}blog\" class=\"home\">dev blog</a> for updates and examples or \n\t\t\tfind us on <a href=\"https://github.com/xriss/fun64\" class=\"home\">github</a>.\n\t\t</p>\n\t</div><div class=\"footer\">\n\t\t<p>\n\t\t\t<a \n\t\t\thref=\"https://gist.github.com/search?q=fun64+lua\" class=\"home\">gists</a> are the perfect \n\t\t\tway of sharing fun64 files.\n\t\t</p>\n\n\t\t<p>\n\t\t\t<a href=\"{_root}run\" class=\"home\">run</a> provides a way \n\t\t\tof playing them in a browser.\n\t\t</p>\n\t</div>\n</div>\n",
   "fun_blog_code": "<div class=\"blog_code_wrap\" id=\"code_src\" style=\"display:none;\">\n\t<a href=\"{_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View raw lua source</a>\n\t<pre id=\"code{_dirname}\" class=\"lang-lua\"></pre>\n\t<script>\n\t\t$.get(\"{_dirname}/{_blog_post_json.fun_file}\", function(data){\n\t\t\t$(\"[id=\\\"code{_dirname}\\\"]\").text(data).addClass(\"prettyprint\");\n\t\t\tPR.prettyPrint();\n\t\t});\n\t</script>\n</div>\n",
   "fun_blog_embed": "\n<div class=\"blog_embed_wrap\">\n\n\t<div class=\"blog_embed_head\">\n\t\t<div><a class=\"bar\" onclick=\"toggle_code()\">Toggle sourcecode</a></div><div><a class=\"bar\" onclick=\"toggle_fun()\">Run program</a></div>\n\t</div>\n\t\n\t<script>\n\t\tfunction toggle_code() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_src');\n\t\t\tvar y = document.getElementById('code_fun');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction toggle_fun() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_fun');\n\t\t\tvar y = document.getElementById('code_src');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t\tload_fun();\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t</script>\n\t\n\t\n\t{fun_blog_code}\n\n\t<div class=\"code_embed_wrap\" id=\"code_fun\" style=\"display:none;\"><!--\trun program\t-->\n\t\t<div class=\"code_embed\">\n\t\t\t<a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View fullscreen</a>\n\t\t\t<div class=\"loading\" id=\"loading_pct\">Loading...Please wait...^.^=</div>\n\t\t\t<script id=\"gamecake_init_lua\" type=\"text/lua\" >--<![CDATA[\n\n\t\t\tlocal hx,hy,ss=128,128,3\n\n\t\t\tlocal opts={\n\t\t\t\ttimes=true, -- request simple time keeping samples\n\n\t\t\t\twidth=hx*ss,\t-- display basics\n\t\t\t\theight=hy*ss,\n\t\t\t\tscreen_scale=ss,\n\t\t\t--\tshow=\"full\",\n\t\t\t\ttitle=\"fun\",\n\t\t\t\tstart=\"wetgenes.gamecake.fun.main\",\n\t\t\t\tfun=\"start\",\n\t\t\t\tfps=60,\n\t\t\t\t... -- include commandline opts\n\t\t\t}\n\n\t\t\tmath.randomseed( os.time() ) -- try and randomise a little bit better\n\n\t\t\toven=require(\"wetgenes.gamecake.oven\").bake(opts).preheat()\n\n\t\t\treturn oven:serv()\n\n\t\t--]]></script>\n\n\n\t\t\t<div id=\"gamecake_container\">\n\t\t\t\t<canvas id=\"gamecake_canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\n\t\t\t\t\t\tvar gamecake_post;\n\t\t\t\t\t\tvar Module;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar resize=function(){\n\t\t\t\t\t\t\tvar e=document.getElementById(\"gamecake_container\");\n\t\t\t\t\t\t\tvar w=parseFloat(window.getComputedStyle(e).width);\n\t\t\t\t\t\t\tvar h=parseFloat(window.getComputedStyle(e).height);\n\t\t\t\t\t\t\tModule.setCanvasSize(w,h);\n\t\t\t\t\t\t\tif(gamecake_post)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").hardcore.resize(nil,'+w+','+h+')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar gamecake_start=function() {\n\n\t\t\t\t//initialise lua\n\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").emcc_start({})');\n\n\t\t\t\t// create a pulse function and call it every frame\n\t\t\t\t\t\t\tvar pulse;\n\t\t\t\t\t\t\tvar resize_wait=16;\n\t\t\t\t\t\t\tpulse=function() {\n\t\t\t\t\t\t\t\trequestAnimationFrame(pulse); // we need to always ask to be called again\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','return gamecake_pulse()');\n\t\t\t\t\t\t\t\tif(resize_wait>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(--resize_wait==0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"resioz\");\n\t\t\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trequestAnimationFrame(pulse); // start the updates\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar show_progress=function(n)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.show_progress_max=window.show_progress_max || 0;\n\t\t\t\t\t\t\tif(window.show_progress_max<n) { window.show_progress_max=n; }\n\t\t\t\t\t\t\tvar pct=Math.floor(100*(1-(n/window.show_progress_max)));\n\t\t\t\t\t\t\tconsole.log(\"GameCake Loading \"+pct+\"%\");\n//\t\t\t\t\t\t\tvar x = document.getElementById('loading_pct');\n//\t\t\t\t\t\t\tx.innerHTML = \"GameCake Loading \"+pct+\"%\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction load_fun() {\n\t\t\t\t\t\t\tload_fun=function(){\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\twindow.addEventListener(\"resize\",resize);\n\t\t\t\t\t\t\tModule={};\n\t\t\t\t\t\t\tModule.canvas=document.getElementById(\"gamecake_canvas\");\n\t\t\t\t\t\t\tModule.canvas_resize=resize;\n\t\t\t\t\t\t\tModule.memoryInitializerPrefixURL=\"{_root}exe/\";\n\t\t\t\t\t\t\tModule['_main'] = function() {\n\t\t\t\t\t\t\t\tgamecake_post = Module.cwrap('main_post', 'int', ['string','string']);\n\t\t\t\t\t\t\t\tgamecake_start();\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"preInit\"] = function() {\n\t\t\t\t\t\t\t\tFS.mkdir(\"/lua\");\n\t\t\t\t\t\t\t\tFS.createPreloadedFile('/', \"start.fun.lua\", \"{_dirname}/{_blog_post_json.fun_file}\", true, false);\n\t\t\t\t\t\t\t\tFS.writeFile( \"/lua/init.lua\" , document.getElementById(\"gamecake_init_lua\").innerHTML );\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"monitorRunDependencies\"]=show_progress;\n\n\n\t\t\t\t\t\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\t\t\t\t\t\t// space and arrow keys\n\t\t\t\t\t\t\t\tif([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar script = document.createElement('script');\n\t\t\t\t\t\t\tscript.src = \"{_root}exe/gamecake.js\";\n\n\t\t\t\t\t\t\tdocument.head.appendChild(script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>\n\n</div>\n",
   "fun_blog_link": "\n<div class=\"blog_link_wrap\">\n\t<div class=\"blog_embed_head\">\n\t\tCheckout the Fun64 <a href=\"{_dirname}/{_blog_post_json.fun_file}\">lua source file</a> or view the result <a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\">fullscreen</a>.\n\t</div>\n\t{fun_blog_code}\n</div>\n",
   "head": "<title>{title}</title>\n<style>\n{css}\n</style>\n<script\tsrc=\"{_root}js/jquery-3.1.1.min.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/prettify.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/lang-lua.js\" ></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{_root}js/google-code-prettify/skins/sons-of-obsidian.css\" />",
   "html": "<html>\n<head>{head}</head>\n<body>{body}{footer}</body>\n</html>",
   "link_newer_page": "<a href=\"{_it}\">Newer posts</a>\n\n",
   "link_newer_post": "<a href=\"{_it}\">Newer post</a>\n\n",
   "link_older_page": "<a href=\"{_it}\">Older posts</a>\n",
   "link_older_post": "<a href=\"{_it}\">Older post</a>\n",
   "this_chunk_is_not_used": "<div class=\"blog_wrap\">\n\t<div class=\"blog_info\"><a href=\"{_dirname}\">{_blog_post_json.title}</a> by {_blog_post_json.author} on {_blog_post_json.datedash}</div>\n\t{_blog_post_body}\n\t{_blog_post_json.fun_file&fun_blog_link}\n</div>\n",
   "title": "{_blog_post_json.title}"
  },
  {
   "_blog_json": {
    "dir": "blog/.",
    "posts_per_page": 12
   },
   "_blog_page_body": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">You are reading: <span>Fun64 dev blog</span></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div>\n</div>\n\n<div class=\"blog_list_wrap\">{_list:blog_list}</div>\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_page_older:link_older_page}</div><div class=\"page_link\">{_blog_page_newer:link_newer_page}</div>\n</div>\n\n",
   "_blog_post_body": "<p>Lets see if we can build 4lfa.com style comics using just fun64 :)</p>\n",
   "_blog_post_body_many": "<a href=\"{_dirname}\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t<span class=\"blog_post_snip\">{_blog_post_body}</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n</a>\n\n",
   "_blog_post_body_one": "<div class=\"nav_wrap\"><div class=\"nav\">You are reading: <a href=\"{_root}blog\">Fun64 dev blog</a></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div></div>\n<div class=\"blog_wrap\">\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t{_blog_post_body}\t\n</div>\n\n{_blog_post_json.fun_file&fun_blog_embed}\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_post_older:link_older_post}</div><div class=\"page_link\">{_blog_post_newer:link_newer_post}</div>\n</div>\n\n",
   "_blog_post_json": {
    "author": "xriss",
    "datedash": "2017-01-27",
    "datetime": [
     2017,
     1,
     27,
     0,
     0,
     0
    ],
    "fun_file": "comic.fun.lua",
    "fun_height": "512px",
    "title": "Comic test.",
    "unixtime": 1485475200
   },
   "_blog_post_newer": "/fun64/blog/2017-02-12-hello-world/",
   "_blog_post_older": "/fun64/blog/2017-01-20-basic-fun/",
   "_body": "<a href=\"/fun64/blog/2017-01-27-comic-test\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">Comic test.</span>\n\t<span class=\"blog_post_snip\"><p>Lets see if we can build 4lfa.com style comics using just fun64 :)</p>\n</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ xriss</span>\n\t\t<span><i>2017-01-27</i></span>\n\t</span>\n</a>\n\n",
   "_dirname": "/fun64/blog/2017-01-27-comic-test",
   "_filename": "/fun64/blog/2017-01-27-comic-test/index.html",
   "_flags": {
    "_blog_post_body": {
     "form": "markdown"
    },
    "body": {
     "trim": "ends"
    },
    "css": {
     "same": "append"
    },
    "head": {
     "trim": "ends"
    },
    "html": {
     "trim": "ends"
    },
    "title": {
     "trim": "ends"
    }
   },
   "_root": "/fun64/",
   "_sourcename": "blog/2017-01-27-comic-test/index.html",
   "blog_list": "{_it._body}\n\n",
   "body": "{_blog_post_body_one}",
   "css": "\n*\t\t{box-sizing:border-box;}\nbody\t{background:#f7f4fd; font-family:mono, sans-serif; font-size:16px; line-height:24px; color:#3a3a3a; width:100%; padding:50px; margin:0px auto;}\nh1\t\t{font-size:4em; font-weight:normal; color:#1400ff;}\nh2\t\t{font-size:2em; font-weight:normal;}\n\na\t\t{color:#1400ff;}\n\na.bar\t\t{color:#f7f4fd; background-color:#3a3a3a; border-radius:4px; padding:5px; text-decoration:none; border-bottom:none;}\na.bar:hover\t{background-color:#1400ff; border-bottom:none; cursor:pointer;}\n\n.nav_wrap\t{width:1024px; margin:auto;}\n.nav\t\t{display:inline-block; vertical-align:top; width:50%; border-bottom:1px dashed #1400ff; padding-bottom:20px;}\n.nav:nth-of-type(2)\t{text-align:right;}\n\n.page_link\t{display:inline-block; width:50%; vertical-align:top; margin-top:80px;}\n.page_link:nth-of-type(2)\t{text-align:right;}\n\n\n/*\tINDEX styles\n\t============================================= */\n.fun_bits\t\t{width:1024px; margin:auto; font-size:14px; line-height:16px; color:#1400ff;}\n\n\n/*\tFOOTER styles\n\t============================================= */\n\t\n.footer_wrap\t{border-top:1px dashed #1400ff; padding-top:20px; width:1024px; margin:auto; margin-top:40px;}\n.footer_wrap p\t{padding:5px 0;}\n.footer:nth-of-type(1) p:nth-of-type(1)\t{font-size:20px; margin-right:5em;}\n\n.footer\t\t\t{display:inline-block; vertical-align:top; width:70%;}\n.footer:nth-of-type(2)\t{width:30%;}\n\na.home\t\t\t{font-weight:bold; color:#1400ff; text-decoration:none;}\na.home:hover\t{text-decoration:underline;}\n\n\n/*\tBLOG styles\n\t============================================= */\n\nspan.blog_post_title{display:block; font-size:42px; line-height:46px; font-weight:bold;}\nspan.blog_post_user\t{display:block; font-size:12px; margin-bottom:20px;}\n\n.blog_list_wrap\t\t{width:1024px; margin:0 auto;}\n.line\t\t\t\t{border-top:1px dashed #1400ff; margin-top:40px; margin-bottom:40px; position:relative;}\n.blog_info\t\t\t{position:absolute; right:10px; top:10px;}\n\n.blog_wrap\t\t\t{width:700px; margin:auto; margin-top:40px; font-size:18px; line-height:26px; border:0;}\n\n\n/*\tBLOG post styles\n\t============================================= */\n\na.blog_post_link\t{display:inline-block; text-decoration:none; width:320px; height:300px; overflow:hidden; vertical-align:top; padding:20px; box-sizing:border-box; background-color:#fff; color:#3a3a3a; margin-top:40px; margin-right:20px; position:relative; border:8px solid #efefef; border-radius:6px;}\na.blog_post_link:nth-of-type(odd)\t{background-color:#1400ff; color:#fff;}\na.blog_post_link:nth-of-type(3)\t\t{margin-right:0;}\na.blog_post_link:hover\t{background-color:rgba(0,0,0,0.4); color:#fff;}\n\na.blog_post_link span.blog_post_title\t{display:block; font-size:21px; line-height:30px; font-weight:bold;}\na.blog_post_link span.blog_post_snip\t{display:block; height:180px; overflow:hidden;}\na.blog_post_link span.blog_post_user\t{position:absolute; bottom:0; left:0; background-color:#3a3a3a; color:#fff; width:320px; padding:10px 20px; font-size:12px; margin:0;}\n\n\n/*\tCODE EMBED\n\t============================================= */\n\n.blog_embed_wrap\t{margin:0 auto; margin-top:40px;}\n.blog_embed_head\t{width:700px; margin:auto;}\n.blog_embed_head div{width:50%; display:inline-block; vertical-align:top; border-top:1px dashed #1400ff; padding-top:40px; margin-bottom:20px;}\n.blog_embed_head div:nth-of-type(2)\t{text-align:right;}\n\n\n.blog_code_wrap\t\t{width:1024px; font-size:14px; margin:0 auto; position:relative;}\npre.lang-lua\t\t{height:100%; overflow:scroll; padding:16px; padding-top:0;}\na.raw_src\t\t\t{display:block; position:absolute; right:15px; top:0; color:#444; text-decoration:none; background-color:#fff; padding:5px 10px; text-align:center; z-index:666;}\na.raw_src:hover\t\t{color:#1400ff;}\n\n#gamecake_container, #gamecake_canvas\t{width:100%; height:100%; position:absolute;}\n.code_embed_wrap\t{width:1024px; height:100%; overflow:hidden; margin:0 auto; margin-top:14px;}\n.code_embed\t\t\t{width:100%; height:100%; position:relative; background-color:#000;}\n.loading\t\t\t{position:absolute; top:40px; right:50%; color:#fff;}\n\n\n/*\tMOBILE post styles\n\t============================================= */\n@media screen and (max-width:1024px) {\n\n\tbody\t\t{padding:0;}\t\n\tpre\t\t\t{margin:0 auto;}\n\t.fun_bits\t{font-size:12px;}\n\t.fun_bits, .nav_wrap, .footer_wrap\t{width:960px; margin:0 auto; padding:50px;}\n\t.blog_list_wrap, a.blog_post_link\t{width:860px;}\n\t\n\t.nav\t\t\t\t{font-size:38px; line-height:54px; min-height:130px;}\n\t.footer, .footer:nth-of-type(2)\t\t\t{display:block; width:100%;}\n\t\n\t.footer p, .footer:nth-of-type(1) p:nth-of-type(1), .blog_wrap p\t\t{margin:40px 0; font-size:18px; line-height:54px;}\n\t\n\ta.blog_post_link\t{display:block; margin:0 auto; margin-bottom:40px; font-size:38px; line-height:54px;}\n\ta.blog_post_link span.blog_post_title\t{font-size:48px; line-height:68px;}\n\ta.blog_post_link span.blog_post_snip\t{height:200px;}\n\ta.blog_post_link span.blog_post_user\t{font-size:24px; width:960px;}\n}\n",
   "footer": "<div class=\"footer_wrap\">\n\t<div class=\"footer\">\n\t\t<p>\n\t\t\t<a href=\"{_root}\" class=\"home\">Fun64</a> is a simple game engine designed \n\t\t\tfor single file game sketches.\n\t\t</p>\n\n\t\t<p>\n\t\t\tSee <a href=\"{_root}blog\" class=\"home\">dev blog</a> for updates and examples or \n\t\t\tfind us on <a href=\"https://github.com/xriss/fun64\" class=\"home\">github</a>.\n\t\t</p>\n\t</div><div class=\"footer\">\n\t\t<p>\n\t\t\t<a \n\t\t\thref=\"https://gist.github.com/search?q=fun64+lua\" class=\"home\">gists</a> are the perfect \n\t\t\tway of sharing fun64 files.\n\t\t</p>\n\n\t\t<p>\n\t\t\t<a href=\"{_root}run\" class=\"home\">run</a> provides a way \n\t\t\tof playing them in a browser.\n\t\t</p>\n\t</div>\n</div>\n",
   "fun_blog_code": "<div class=\"blog_code_wrap\" id=\"code_src\" style=\"display:none;\">\n\t<a href=\"{_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View raw lua source</a>\n\t<pre id=\"code{_dirname}\" class=\"lang-lua\"></pre>\n\t<script>\n\t\t$.get(\"{_dirname}/{_blog_post_json.fun_file}\", function(data){\n\t\t\t$(\"[id=\\\"code{_dirname}\\\"]\").text(data).addClass(\"prettyprint\");\n\t\t\tPR.prettyPrint();\n\t\t});\n\t</script>\n</div>\n",
   "fun_blog_embed": "\n<div class=\"blog_embed_wrap\">\n\n\t<div class=\"blog_embed_head\">\n\t\t<div><a class=\"bar\" onclick=\"toggle_code()\">Toggle sourcecode</a></div><div><a class=\"bar\" onclick=\"toggle_fun()\">Run program</a></div>\n\t</div>\n\t\n\t<script>\n\t\tfunction toggle_code() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_src');\n\t\t\tvar y = document.getElementById('code_fun');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction toggle_fun() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_fun');\n\t\t\tvar y = document.getElementById('code_src');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t\tload_fun();\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t</script>\n\t\n\t\n\t{fun_blog_code}\n\n\t<div class=\"code_embed_wrap\" id=\"code_fun\" style=\"display:none;\"><!--\trun program\t-->\n\t\t<div class=\"code_embed\">\n\t\t\t<a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View fullscreen</a>\n\t\t\t<div class=\"loading\" id=\"loading_pct\">Loading...Please wait...^.^=</div>\n\t\t\t<script id=\"gamecake_init_lua\" type=\"text/lua\" >--<![CDATA[\n\n\t\t\tlocal hx,hy,ss=128,128,3\n\n\t\t\tlocal opts={\n\t\t\t\ttimes=true, -- request simple time keeping samples\n\n\t\t\t\twidth=hx*ss,\t-- display basics\n\t\t\t\theight=hy*ss,\n\t\t\t\tscreen_scale=ss,\n\t\t\t--\tshow=\"full\",\n\t\t\t\ttitle=\"fun\",\n\t\t\t\tstart=\"wetgenes.gamecake.fun.main\",\n\t\t\t\tfun=\"start\",\n\t\t\t\tfps=60,\n\t\t\t\t... -- include commandline opts\n\t\t\t}\n\n\t\t\tmath.randomseed( os.time() ) -- try and randomise a little bit better\n\n\t\t\toven=require(\"wetgenes.gamecake.oven\").bake(opts).preheat()\n\n\t\t\treturn oven:serv()\n\n\t\t--]]></script>\n\n\n\t\t\t<div id=\"gamecake_container\">\n\t\t\t\t<canvas id=\"gamecake_canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\n\t\t\t\t\t\tvar gamecake_post;\n\t\t\t\t\t\tvar Module;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar resize=function(){\n\t\t\t\t\t\t\tvar e=document.getElementById(\"gamecake_container\");\n\t\t\t\t\t\t\tvar w=parseFloat(window.getComputedStyle(e).width);\n\t\t\t\t\t\t\tvar h=parseFloat(window.getComputedStyle(e).height);\n\t\t\t\t\t\t\tModule.setCanvasSize(w,h);\n\t\t\t\t\t\t\tif(gamecake_post)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").hardcore.resize(nil,'+w+','+h+')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar gamecake_start=function() {\n\n\t\t\t\t//initialise lua\n\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").emcc_start({})');\n\n\t\t\t\t// create a pulse function and call it every frame\n\t\t\t\t\t\t\tvar pulse;\n\t\t\t\t\t\t\tvar resize_wait=16;\n\t\t\t\t\t\t\tpulse=function() {\n\t\t\t\t\t\t\t\trequestAnimationFrame(pulse); // we need to always ask to be called again\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','return gamecake_pulse()');\n\t\t\t\t\t\t\t\tif(resize_wait>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(--resize_wait==0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"resioz\");\n\t\t\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trequestAnimationFrame(pulse); // start the updates\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar show_progress=function(n)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.show_progress_max=window.show_progress_max || 0;\n\t\t\t\t\t\t\tif(window.show_progress_max<n) { window.show_progress_max=n; }\n\t\t\t\t\t\t\tvar pct=Math.floor(100*(1-(n/window.show_progress_max)));\n\t\t\t\t\t\t\tconsole.log(\"GameCake Loading \"+pct+\"%\");\n//\t\t\t\t\t\t\tvar x = document.getElementById('loading_pct');\n//\t\t\t\t\t\t\tx.innerHTML = \"GameCake Loading \"+pct+\"%\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction load_fun() {\n\t\t\t\t\t\t\tload_fun=function(){\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\twindow.addEventListener(\"resize\",resize);\n\t\t\t\t\t\t\tModule={};\n\t\t\t\t\t\t\tModule.canvas=document.getElementById(\"gamecake_canvas\");\n\t\t\t\t\t\t\tModule.canvas_resize=resize;\n\t\t\t\t\t\t\tModule.memoryInitializerPrefixURL=\"{_root}exe/\";\n\t\t\t\t\t\t\tModule['_main'] = function() {\n\t\t\t\t\t\t\t\tgamecake_post = Module.cwrap('main_post', 'int', ['string','string']);\n\t\t\t\t\t\t\t\tgamecake_start();\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"preInit\"] = function() {\n\t\t\t\t\t\t\t\tFS.mkdir(\"/lua\");\n\t\t\t\t\t\t\t\tFS.createPreloadedFile('/', \"start.fun.lua\", \"{_dirname}/{_blog_post_json.fun_file}\", true, false);\n\t\t\t\t\t\t\t\tFS.writeFile( \"/lua/init.lua\" , document.getElementById(\"gamecake_init_lua\").innerHTML );\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"monitorRunDependencies\"]=show_progress;\n\n\n\t\t\t\t\t\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\t\t\t\t\t\t// space and arrow keys\n\t\t\t\t\t\t\t\tif([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar script = document.createElement('script');\n\t\t\t\t\t\t\tscript.src = \"{_root}exe/gamecake.js\";\n\n\t\t\t\t\t\t\tdocument.head.appendChild(script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>\n\n</div>\n",
   "fun_blog_link": "\n<div class=\"blog_link_wrap\">\n\t<div class=\"blog_embed_head\">\n\t\tCheckout the Fun64 <a href=\"{_dirname}/{_blog_post_json.fun_file}\">lua source file</a> or view the result <a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\">fullscreen</a>.\n\t</div>\n\t{fun_blog_code}\n</div>\n",
   "head": "<title>{title}</title>\n<style>\n{css}\n</style>\n<script\tsrc=\"{_root}js/jquery-3.1.1.min.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/prettify.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/lang-lua.js\" ></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{_root}js/google-code-prettify/skins/sons-of-obsidian.css\" />",
   "html": "<html>\n<head>{head}</head>\n<body>{body}{footer}</body>\n</html>",
   "link_newer_page": "<a href=\"{_it}\">Newer posts</a>\n\n",
   "link_newer_post": "<a href=\"{_it}\">Newer post</a>\n\n",
   "link_older_page": "<a href=\"{_it}\">Older posts</a>\n",
   "link_older_post": "<a href=\"{_it}\">Older post</a>\n",
   "this_chunk_is_not_used": "<div class=\"blog_wrap\">\n\t<div class=\"blog_info\"><a href=\"{_dirname}\">{_blog_post_json.title}</a> by {_blog_post_json.author} on {_blog_post_json.datedash}</div>\n\t{_blog_post_body}\n\t{_blog_post_json.fun_file&fun_blog_link}\n</div>\n",
   "title": "{_blog_post_json.title}"
  },
  {
   "_blog_json": {
    "dir": "blog/.",
    "posts_per_page": 12
   },
   "_blog_page_body": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">You are reading: <span>Fun64 dev blog</span></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div>\n</div>\n\n<div class=\"blog_list_wrap\">{_list:blog_list}</div>\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_page_older:link_older_page}</div><div class=\"page_link\">{_blog_page_newer:link_newer_page}</div>\n</div>\n\n",
   "_blog_post_body": "<p>A cut down and basic fun example, we do not make many assumptions so \nyou are free to configure and setup your code to your own tastes.</p>\n<p>There are only two parts that you must provide for fun to work. The \nfirst is a table describing the virtual hardware component setup, eg \nthe resolution of screen and tilemaps and sprite layers to display.</p>\n<pre><code>hardware={\n    {\n        component=&quot;screen&quot;,\n        size={424,240}, -- lowrez with a 1920x1080 aspect\n        scale=3, -- draw in a window at 3 times scale\n        fps=60, -- 60 fps please\n    },\n    ...\n}\n</code></pre><p>This requests the virtual hardware that will be setup before main is \ncalled. system is a global table that will be created according to your \nrequested hardware and can then be referenced when the main function is \ncalled.</p>\n<p>The second is a main function which will be called as a yield-able \nco-routine with a table that should be treated as an incoming message. \nUse the basic skeleton below to receive need.setup/update/draw \nrequests. As you can see it is possible to have multiple needs at once \nand this call structure allows for a setup, repeat update/draw then cleanup \nflow of code within this co-routine.</p>\n<pre><code>function main(need)\n    if not need.setup then need=coroutine.yield() end -- wait for setup request\n\n    -- perform setup\n\n    local done=false while not done do\n        need=coroutine.yield()\n\n        if need.update then\n\n            -- perform update\n\n        end\n\n        if need.draw then\n\n            -- perform draw\n\n        end            \n\n        if need.clean then done=true end -- cleanup requested\n    end\n\n    -- perform cleanup\n\nend\n</code></pre>",
   "_blog_post_body_many": "<a href=\"{_dirname}\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t<span class=\"blog_post_snip\">{_blog_post_body}</span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n</a>\n\n",
   "_blog_post_body_one": "<div class=\"nav_wrap\"><div class=\"nav\">You are reading: <a href=\"{_root}blog\">Fun64 dev blog</a></div><div class=\"nav\"><a href=\"{_root}\" class=\"bar\">Home</a></div></div>\n<div class=\"blog_wrap\">\n\t<span class=\"blog_post_user\">\n\t\t<span>~ {_blog_post_json.author}</span>\n\t\t<span><i>{_blog_post_json.datedash}</i></span>\n\t</span>\n\t<span class=\"blog_post_title\">{_blog_post_json.title}</span>\n\t{_blog_post_body}\t\n</div>\n\n{_blog_post_json.fun_file&fun_blog_embed}\n\n<div class=\"nav_wrap\">\n\t<div class=\"page_link\">{_blog_post_older:link_older_post}</div><div class=\"page_link\">{_blog_post_newer:link_newer_post}</div>\n</div>\n\n",
   "_blog_post_json": {
    "author": "xriss",
    "datedash": "2017-01-20",
    "datetime": [
     2017,
     1,
     20,
     0,
     0,
     0
    ],
    "fun_file": "basic.fun.lua",
    "fun_height": "512px",
    "title": "Basic fun!",
    "unixtime": 1484870400
   },
   "_blog_post_newer": "/fun64/blog/2017-01-27-comic-test/",
   "_body": "<a href=\"/fun64/blog/2017-01-20-basic-fun\" class=\"blog_post_link\">\n\t<span class=\"blog_post_title\">Basic fun!</span>\n\t<span class=\"blog_post_snip\"><p>A cut down and basic fun example, we do not make many assumptions so \nyou are free to configure and setup your code to your own tastes.</p>\n<p>There are only two parts that you must provide for fun to work. The \nfirst is a table describing the virtual hardware component setup, eg \nthe resolution of screen and tilemaps and sprite layers to display.</p>\n<pre><code>hardware={\n    {\n        component=&quot;screen&quot;,\n        size={424,240}, -- lowrez with a 1920x1080 aspect\n        scale=3, -- draw in a window at 3 times scale\n        fps=60, -- 60 fps please\n    },\n    ...\n}\n</code></pre><p>This requests the virtual hardware that will be setup before main is \ncalled. system is a global table that will be created according to your \nrequested hardware and can then be referenced when the main function is \ncalled.</p>\n<p>The second is a main function which will be called as a yield-able \nco-routine with a table that should be treated as an incoming message. \nUse the basic skeleton below to receive need.setup/update/draw \nrequests. As you can see it is possible to have multiple needs at once \nand this call structure allows for a setup, repeat update/draw then cleanup \nflow of code within this co-routine.</p>\n<pre><code>function main(need)\n    if not need.setup then need=coroutine.yield() end -- wait for setup request\n\n    -- perform setup\n\n    local done=false while not done do\n        need=coroutine.yield()\n\n        if need.update then\n\n            -- perform update\n\n        end\n\n        if need.draw then\n\n            -- perform draw\n\n        end            \n\n        if need.clean then done=true end -- cleanup requested\n    end\n\n    -- perform cleanup\n\nend\n</code></pre></span>\n\t<span class=\"blog_post_user\">\n\t\t<span>~ xriss</span>\n\t\t<span><i>2017-01-20</i></span>\n\t</span>\n</a>\n\n",
   "_dirname": "/fun64/blog/2017-01-20-basic-fun",
   "_filename": "/fun64/blog/2017-01-20-basic-fun/index.html",
   "_flags": {
    "_blog_post_body": {
     "form": "markdown"
    },
    "body": {
     "trim": "ends"
    },
    "css": {
     "same": "append"
    },
    "head": {
     "trim": "ends"
    },
    "html": {
     "trim": "ends"
    },
    "title": {
     "trim": "ends"
    }
   },
   "_root": "/fun64/",
   "_sourcename": "blog/2017-01-20-basic-fun/index.html",
   "blog_list": "{_it._body}\n\n",
   "body": "{_blog_post_body_one}",
   "css": "\n*\t\t{box-sizing:border-box;}\nbody\t{background:#f7f4fd; font-family:mono, sans-serif; font-size:16px; line-height:24px; color:#3a3a3a; width:100%; padding:50px; margin:0px auto;}\nh1\t\t{font-size:4em; font-weight:normal; color:#1400ff;}\nh2\t\t{font-size:2em; font-weight:normal;}\n\na\t\t{color:#1400ff;}\n\na.bar\t\t{color:#f7f4fd; background-color:#3a3a3a; border-radius:4px; padding:5px; text-decoration:none; border-bottom:none;}\na.bar:hover\t{background-color:#1400ff; border-bottom:none; cursor:pointer;}\n\n.nav_wrap\t{width:1024px; margin:auto;}\n.nav\t\t{display:inline-block; vertical-align:top; width:50%; border-bottom:1px dashed #1400ff; padding-bottom:20px;}\n.nav:nth-of-type(2)\t{text-align:right;}\n\n.page_link\t{display:inline-block; width:50%; vertical-align:top; margin-top:80px;}\n.page_link:nth-of-type(2)\t{text-align:right;}\n\n\n/*\tINDEX styles\n\t============================================= */\n.fun_bits\t\t{width:1024px; margin:auto; font-size:14px; line-height:16px; color:#1400ff;}\n\n\n/*\tFOOTER styles\n\t============================================= */\n\t\n.footer_wrap\t{border-top:1px dashed #1400ff; padding-top:20px; width:1024px; margin:auto; margin-top:40px;}\n.footer_wrap p\t{padding:5px 0;}\n.footer:nth-of-type(1) p:nth-of-type(1)\t{font-size:20px; margin-right:5em;}\n\n.footer\t\t\t{display:inline-block; vertical-align:top; width:70%;}\n.footer:nth-of-type(2)\t{width:30%;}\n\na.home\t\t\t{font-weight:bold; color:#1400ff; text-decoration:none;}\na.home:hover\t{text-decoration:underline;}\n\n\n/*\tBLOG styles\n\t============================================= */\n\nspan.blog_post_title{display:block; font-size:42px; line-height:46px; font-weight:bold;}\nspan.blog_post_user\t{display:block; font-size:12px; margin-bottom:20px;}\n\n.blog_list_wrap\t\t{width:1024px; margin:0 auto;}\n.line\t\t\t\t{border-top:1px dashed #1400ff; margin-top:40px; margin-bottom:40px; position:relative;}\n.blog_info\t\t\t{position:absolute; right:10px; top:10px;}\n\n.blog_wrap\t\t\t{width:700px; margin:auto; margin-top:40px; font-size:18px; line-height:26px; border:0;}\n\n\n/*\tBLOG post styles\n\t============================================= */\n\na.blog_post_link\t{display:inline-block; text-decoration:none; width:320px; height:300px; overflow:hidden; vertical-align:top; padding:20px; box-sizing:border-box; background-color:#fff; color:#3a3a3a; margin-top:40px; margin-right:20px; position:relative; border:8px solid #efefef; border-radius:6px;}\na.blog_post_link:nth-of-type(odd)\t{background-color:#1400ff; color:#fff;}\na.blog_post_link:nth-of-type(3)\t\t{margin-right:0;}\na.blog_post_link:hover\t{background-color:rgba(0,0,0,0.4); color:#fff;}\n\na.blog_post_link span.blog_post_title\t{display:block; font-size:21px; line-height:30px; font-weight:bold;}\na.blog_post_link span.blog_post_snip\t{display:block; height:180px; overflow:hidden;}\na.blog_post_link span.blog_post_user\t{position:absolute; bottom:0; left:0; background-color:#3a3a3a; color:#fff; width:320px; padding:10px 20px; font-size:12px; margin:0;}\n\n\n/*\tCODE EMBED\n\t============================================= */\n\n.blog_embed_wrap\t{margin:0 auto; margin-top:40px;}\n.blog_embed_head\t{width:700px; margin:auto;}\n.blog_embed_head div{width:50%; display:inline-block; vertical-align:top; border-top:1px dashed #1400ff; padding-top:40px; margin-bottom:20px;}\n.blog_embed_head div:nth-of-type(2)\t{text-align:right;}\n\n\n.blog_code_wrap\t\t{width:1024px; font-size:14px; margin:0 auto; position:relative;}\npre.lang-lua\t\t{height:100%; overflow:scroll; padding:16px; padding-top:0;}\na.raw_src\t\t\t{display:block; position:absolute; right:15px; top:0; color:#444; text-decoration:none; background-color:#fff; padding:5px 10px; text-align:center; z-index:666;}\na.raw_src:hover\t\t{color:#1400ff;}\n\n#gamecake_container, #gamecake_canvas\t{width:100%; height:100%; position:absolute;}\n.code_embed_wrap\t{width:1024px; height:100%; overflow:hidden; margin:0 auto; margin-top:14px;}\n.code_embed\t\t\t{width:100%; height:100%; position:relative; background-color:#000;}\n.loading\t\t\t{position:absolute; top:40px; right:50%; color:#fff;}\n\n\n/*\tMOBILE post styles\n\t============================================= */\n@media screen and (max-width:1024px) {\n\n\tbody\t\t{padding:0;}\t\n\tpre\t\t\t{margin:0 auto;}\n\t.fun_bits\t{font-size:12px;}\n\t.fun_bits, .nav_wrap, .footer_wrap\t{width:960px; margin:0 auto; padding:50px;}\n\t.blog_list_wrap, a.blog_post_link\t{width:860px;}\n\t\n\t.nav\t\t\t\t{font-size:38px; line-height:54px; min-height:130px;}\n\t.footer, .footer:nth-of-type(2)\t\t\t{display:block; width:100%;}\n\t\n\t.footer p, .footer:nth-of-type(1) p:nth-of-type(1), .blog_wrap p\t\t{margin:40px 0; font-size:18px; line-height:54px;}\n\t\n\ta.blog_post_link\t{display:block; margin:0 auto; margin-bottom:40px; font-size:38px; line-height:54px;}\n\ta.blog_post_link span.blog_post_title\t{font-size:48px; line-height:68px;}\n\ta.blog_post_link span.blog_post_snip\t{height:200px;}\n\ta.blog_post_link span.blog_post_user\t{font-size:24px; width:960px;}\n}\n",
   "footer": "<div class=\"footer_wrap\">\n\t<div class=\"footer\">\n\t\t<p>\n\t\t\t<a href=\"{_root}\" class=\"home\">Fun64</a> is a simple game engine designed \n\t\t\tfor single file game sketches.\n\t\t</p>\n\n\t\t<p>\n\t\t\tSee <a href=\"{_root}blog\" class=\"home\">dev blog</a> for updates and examples or \n\t\t\tfind us on <a href=\"https://github.com/xriss/fun64\" class=\"home\">github</a>.\n\t\t</p>\n\t</div><div class=\"footer\">\n\t\t<p>\n\t\t\t<a \n\t\t\thref=\"https://gist.github.com/search?q=fun64+lua\" class=\"home\">gists</a> are the perfect \n\t\t\tway of sharing fun64 files.\n\t\t</p>\n\n\t\t<p>\n\t\t\t<a href=\"{_root}run\" class=\"home\">run</a> provides a way \n\t\t\tof playing them in a browser.\n\t\t</p>\n\t</div>\n</div>\n",
   "fun_blog_code": "<div class=\"blog_code_wrap\" id=\"code_src\" style=\"display:none;\">\n\t<a href=\"{_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View raw lua source</a>\n\t<pre id=\"code{_dirname}\" class=\"lang-lua\"></pre>\n\t<script>\n\t\t$.get(\"{_dirname}/{_blog_post_json.fun_file}\", function(data){\n\t\t\t$(\"[id=\\\"code{_dirname}\\\"]\").text(data).addClass(\"prettyprint\");\n\t\t\tPR.prettyPrint();\n\t\t});\n\t</script>\n</div>\n",
   "fun_blog_embed": "\n<div class=\"blog_embed_wrap\">\n\n\t<div class=\"blog_embed_head\">\n\t\t<div><a class=\"bar\" onclick=\"toggle_code()\">Toggle sourcecode</a></div><div><a class=\"bar\" onclick=\"toggle_fun()\">Run program</a></div>\n\t</div>\n\t\n\t<script>\n\t\tfunction toggle_code() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_src');\n\t\t\tvar y = document.getElementById('code_fun');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction toggle_fun() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_fun');\n\t\t\tvar y = document.getElementById('code_src');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t\tload_fun();\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t</script>\n\t\n\t\n\t{fun_blog_code}\n\n\t<div class=\"code_embed_wrap\" id=\"code_fun\" style=\"display:none;\"><!--\trun program\t-->\n\t\t<div class=\"code_embed\">\n\t\t\t<a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View fullscreen</a>\n\t\t\t<div class=\"loading\" id=\"loading_pct\">Loading...Please wait...^.^=</div>\n\t\t\t<script id=\"gamecake_init_lua\" type=\"text/lua\" >--<![CDATA[\n\n\t\t\tlocal hx,hy,ss=128,128,3\n\n\t\t\tlocal opts={\n\t\t\t\ttimes=true, -- request simple time keeping samples\n\n\t\t\t\twidth=hx*ss,\t-- display basics\n\t\t\t\theight=hy*ss,\n\t\t\t\tscreen_scale=ss,\n\t\t\t--\tshow=\"full\",\n\t\t\t\ttitle=\"fun\",\n\t\t\t\tstart=\"wetgenes.gamecake.fun.main\",\n\t\t\t\tfun=\"start\",\n\t\t\t\tfps=60,\n\t\t\t\t... -- include commandline opts\n\t\t\t}\n\n\t\t\tmath.randomseed( os.time() ) -- try and randomise a little bit better\n\n\t\t\toven=require(\"wetgenes.gamecake.oven\").bake(opts).preheat()\n\n\t\t\treturn oven:serv()\n\n\t\t--]]></script>\n\n\n\t\t\t<div id=\"gamecake_container\">\n\t\t\t\t<canvas id=\"gamecake_canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\n\t\t\t\t\t\tvar gamecake_post;\n\t\t\t\t\t\tvar Module;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar resize=function(){\n\t\t\t\t\t\t\tvar e=document.getElementById(\"gamecake_container\");\n\t\t\t\t\t\t\tvar w=parseFloat(window.getComputedStyle(e).width);\n\t\t\t\t\t\t\tvar h=parseFloat(window.getComputedStyle(e).height);\n\t\t\t\t\t\t\tModule.setCanvasSize(w,h);\n\t\t\t\t\t\t\tif(gamecake_post)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").hardcore.resize(nil,'+w+','+h+')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar gamecake_start=function() {\n\n\t\t\t\t//initialise lua\n\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").emcc_start({})');\n\n\t\t\t\t// create a pulse function and call it every frame\n\t\t\t\t\t\t\tvar pulse;\n\t\t\t\t\t\t\tvar resize_wait=16;\n\t\t\t\t\t\t\tpulse=function() {\n\t\t\t\t\t\t\t\trequestAnimationFrame(pulse); // we need to always ask to be called again\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','return gamecake_pulse()');\n\t\t\t\t\t\t\t\tif(resize_wait>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(--resize_wait==0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"resioz\");\n\t\t\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trequestAnimationFrame(pulse); // start the updates\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar show_progress=function(n)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.show_progress_max=window.show_progress_max || 0;\n\t\t\t\t\t\t\tif(window.show_progress_max<n) { window.show_progress_max=n; }\n\t\t\t\t\t\t\tvar pct=Math.floor(100*(1-(n/window.show_progress_max)));\n\t\t\t\t\t\t\tconsole.log(\"GameCake Loading \"+pct+\"%\");\n//\t\t\t\t\t\t\tvar x = document.getElementById('loading_pct');\n//\t\t\t\t\t\t\tx.innerHTML = \"GameCake Loading \"+pct+\"%\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction load_fun() {\n\t\t\t\t\t\t\tload_fun=function(){\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\twindow.addEventListener(\"resize\",resize);\n\t\t\t\t\t\t\tModule={};\n\t\t\t\t\t\t\tModule.canvas=document.getElementById(\"gamecake_canvas\");\n\t\t\t\t\t\t\tModule.canvas_resize=resize;\n\t\t\t\t\t\t\tModule.memoryInitializerPrefixURL=\"{_root}exe/\";\n\t\t\t\t\t\t\tModule['_main'] = function() {\n\t\t\t\t\t\t\t\tgamecake_post = Module.cwrap('main_post', 'int', ['string','string']);\n\t\t\t\t\t\t\t\tgamecake_start();\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"preInit\"] = function() {\n\t\t\t\t\t\t\t\tFS.mkdir(\"/lua\");\n\t\t\t\t\t\t\t\tFS.createPreloadedFile('/', \"start.fun.lua\", \"{_dirname}/{_blog_post_json.fun_file}\", true, false);\n\t\t\t\t\t\t\t\tFS.writeFile( \"/lua/init.lua\" , document.getElementById(\"gamecake_init_lua\").innerHTML );\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"monitorRunDependencies\"]=show_progress;\n\n\n\t\t\t\t\t\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\t\t\t\t\t\t// space and arrow keys\n\t\t\t\t\t\t\t\tif([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar script = document.createElement('script');\n\t\t\t\t\t\t\tscript.src = \"{_root}exe/gamecake.js\";\n\n\t\t\t\t\t\t\tdocument.head.appendChild(script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>\n\n</div>\n",
   "fun_blog_link": "\n<div class=\"blog_link_wrap\">\n\t<div class=\"blog_embed_head\">\n\t\tCheckout the Fun64 <a href=\"{_dirname}/{_blog_post_json.fun_file}\">lua source file</a> or view the result <a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\">fullscreen</a>.\n\t</div>\n\t{fun_blog_code}\n</div>\n",
   "head": "<title>{title}</title>\n<style>\n{css}\n</style>\n<script\tsrc=\"{_root}js/jquery-3.1.1.min.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/prettify.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/lang-lua.js\" ></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{_root}js/google-code-prettify/skins/sons-of-obsidian.css\" />",
   "html": "<html>\n<head>{head}</head>\n<body>{body}{footer}</body>\n</html>",
   "link_newer_page": "<a href=\"{_it}\">Newer posts</a>\n\n",
   "link_newer_post": "<a href=\"{_it}\">Newer post</a>\n\n",
   "link_older_page": "<a href=\"{_it}\">Older posts</a>\n",
   "link_older_post": "<a href=\"{_it}\">Older post</a>\n",
   "this_chunk_is_not_used": "<div class=\"blog_wrap\">\n\t<div class=\"blog_info\"><a href=\"{_dirname}\">{_blog_post_json.title}</a> by {_blog_post_json.author} on {_blog_post_json.datedash}</div>\n\t{_blog_post_body}\n\t{_blog_post_json.fun_file&fun_blog_link}\n</div>\n",
   "title": "{_blog_post_json.title}"
  }
 ],
 "_root": "/fun64/",
 "_sourcename": "blog/index.html",
 "blog_list": "{_it._body}\n\n",
 "body": "{_blog_page_body}",
 "css": "\n*\t\t{box-sizing:border-box;}\nbody\t{background:#f7f4fd; font-family:mono, sans-serif; font-size:16px; line-height:24px; color:#3a3a3a; width:100%; padding:50px; margin:0px auto;}\nh1\t\t{font-size:4em; font-weight:normal; color:#1400ff;}\nh2\t\t{font-size:2em; font-weight:normal;}\n\na\t\t{color:#1400ff;}\n\na.bar\t\t{color:#f7f4fd; background-color:#3a3a3a; border-radius:4px; padding:5px; text-decoration:none; border-bottom:none;}\na.bar:hover\t{background-color:#1400ff; border-bottom:none; cursor:pointer;}\n\n.nav_wrap\t{width:1024px; margin:auto;}\n.nav\t\t{display:inline-block; vertical-align:top; width:50%; border-bottom:1px dashed #1400ff; padding-bottom:20px;}\n.nav:nth-of-type(2)\t{text-align:right;}\n\n.page_link\t{display:inline-block; width:50%; vertical-align:top; margin-top:80px;}\n.page_link:nth-of-type(2)\t{text-align:right;}\n\n\n/*\tINDEX styles\n\t============================================= */\n.fun_bits\t\t{width:1024px; margin:auto; font-size:14px; line-height:16px; color:#1400ff;}\n\n\n/*\tFOOTER styles\n\t============================================= */\n\t\n.footer_wrap\t{border-top:1px dashed #1400ff; padding-top:20px; width:1024px; margin:auto; margin-top:40px;}\n.footer_wrap p\t{padding:5px 0;}\n.footer:nth-of-type(1) p:nth-of-type(1)\t{font-size:20px; margin-right:5em;}\n\n.footer\t\t\t{display:inline-block; vertical-align:top; width:70%;}\n.footer:nth-of-type(2)\t{width:30%;}\n\na.home\t\t\t{font-weight:bold; color:#1400ff; text-decoration:none;}\na.home:hover\t{text-decoration:underline;}\n\n\n/*\tBLOG styles\n\t============================================= */\n\nspan.blog_post_title{display:block; font-size:42px; line-height:46px; font-weight:bold;}\nspan.blog_post_user\t{display:block; font-size:12px; margin-bottom:20px;}\n\n.blog_list_wrap\t\t{width:1024px; margin:0 auto;}\n.line\t\t\t\t{border-top:1px dashed #1400ff; margin-top:40px; margin-bottom:40px; position:relative;}\n.blog_info\t\t\t{position:absolute; right:10px; top:10px;}\n\n.blog_wrap\t\t\t{width:700px; margin:auto; margin-top:40px; font-size:18px; line-height:26px; border:0;}\n\n\n/*\tBLOG post styles\n\t============================================= */\n\na.blog_post_link\t{display:inline-block; text-decoration:none; width:320px; height:300px; overflow:hidden; vertical-align:top; padding:20px; box-sizing:border-box; background-color:#fff; color:#3a3a3a; margin-top:40px; margin-right:20px; position:relative; border:8px solid #efefef; border-radius:6px;}\na.blog_post_link:nth-of-type(odd)\t{background-color:#1400ff; color:#fff;}\na.blog_post_link:nth-of-type(3)\t\t{margin-right:0;}\na.blog_post_link:hover\t{background-color:rgba(0,0,0,0.4); color:#fff;}\n\na.blog_post_link span.blog_post_title\t{display:block; font-size:21px; line-height:30px; font-weight:bold;}\na.blog_post_link span.blog_post_snip\t{display:block; height:180px; overflow:hidden;}\na.blog_post_link span.blog_post_user\t{position:absolute; bottom:0; left:0; background-color:#3a3a3a; color:#fff; width:320px; padding:10px 20px; font-size:12px; margin:0;}\n\n\n/*\tCODE EMBED\n\t============================================= */\n\n.blog_embed_wrap\t{margin:0 auto; margin-top:40px;}\n.blog_embed_head\t{width:700px; margin:auto;}\n.blog_embed_head div{width:50%; display:inline-block; vertical-align:top; border-top:1px dashed #1400ff; padding-top:40px; margin-bottom:20px;}\n.blog_embed_head div:nth-of-type(2)\t{text-align:right;}\n\n\n.blog_code_wrap\t\t{width:1024px; font-size:14px; margin:0 auto; position:relative;}\npre.lang-lua\t\t{height:100%; overflow:scroll; padding:16px; padding-top:0;}\na.raw_src\t\t\t{display:block; position:absolute; right:15px; top:0; color:#444; text-decoration:none; background-color:#fff; padding:5px 10px; text-align:center; z-index:666;}\na.raw_src:hover\t\t{color:#1400ff;}\n\n#gamecake_container, #gamecake_canvas\t{width:100%; height:100%; position:absolute;}\n.code_embed_wrap\t{width:1024px; height:100%; overflow:hidden; margin:0 auto; margin-top:14px;}\n.code_embed\t\t\t{width:100%; height:100%; position:relative; background-color:#000;}\n.loading\t\t\t{position:absolute; top:40px; right:50%; color:#fff;}\n\n\n/*\tMOBILE post styles\n\t============================================= */\n@media screen and (max-width:1024px) {\n\n\tbody\t\t{padding:0;}\t\n\tpre\t\t\t{margin:0 auto;}\n\t.fun_bits\t{font-size:12px;}\n\t.fun_bits, .nav_wrap, .footer_wrap\t{width:960px; margin:0 auto; padding:50px;}\n\t.blog_list_wrap, a.blog_post_link\t{width:860px;}\n\t\n\t.nav\t\t\t\t{font-size:38px; line-height:54px; min-height:130px;}\n\t.footer, .footer:nth-of-type(2)\t\t\t{display:block; width:100%;}\n\t\n\t.footer p, .footer:nth-of-type(1) p:nth-of-type(1), .blog_wrap p\t\t{margin:40px 0; font-size:18px; line-height:54px;}\n\t\n\ta.blog_post_link\t{display:block; margin:0 auto; margin-bottom:40px; font-size:38px; line-height:54px;}\n\ta.blog_post_link span.blog_post_title\t{font-size:48px; line-height:68px;}\n\ta.blog_post_link span.blog_post_snip\t{height:200px;}\n\ta.blog_post_link span.blog_post_user\t{font-size:24px; width:960px;}\n}\n",
 "footer": "<div class=\"footer_wrap\">\n\t<div class=\"footer\">\n\t\t<p>\n\t\t\t<a href=\"{_root}\" class=\"home\">Fun64</a> is a simple game engine designed \n\t\t\tfor single file game sketches.\n\t\t</p>\n\n\t\t<p>\n\t\t\tSee <a href=\"{_root}blog\" class=\"home\">dev blog</a> for updates and examples or \n\t\t\tfind us on <a href=\"https://github.com/xriss/fun64\" class=\"home\">github</a>.\n\t\t</p>\n\t</div><div class=\"footer\">\n\t\t<p>\n\t\t\t<a \n\t\t\thref=\"https://gist.github.com/search?q=fun64+lua\" class=\"home\">gists</a> are the perfect \n\t\t\tway of sharing fun64 files.\n\t\t</p>\n\n\t\t<p>\n\t\t\t<a href=\"{_root}run\" class=\"home\">run</a> provides a way \n\t\t\tof playing them in a browser.\n\t\t</p>\n\t</div>\n</div>\n",
 "fun_blog_code": "<div class=\"blog_code_wrap\" id=\"code_src\" style=\"display:none;\">\n\t<a href=\"{_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View raw lua source</a>\n\t<pre id=\"code{_dirname}\" class=\"lang-lua\"></pre>\n\t<script>\n\t\t$.get(\"{_dirname}/{_blog_post_json.fun_file}\", function(data){\n\t\t\t$(\"[id=\\\"code{_dirname}\\\"]\").text(data).addClass(\"prettyprint\");\n\t\t\tPR.prettyPrint();\n\t\t});\n\t</script>\n</div>\n",
 "fun_blog_embed": "\n<div class=\"blog_embed_wrap\">\n\n\t<div class=\"blog_embed_head\">\n\t\t<div><a class=\"bar\" onclick=\"toggle_code()\">Toggle sourcecode</a></div><div><a class=\"bar\" onclick=\"toggle_fun()\">Run program</a></div>\n\t</div>\n\t\n\t<script>\n\t\tfunction toggle_code() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_src');\n\t\t\tvar y = document.getElementById('code_fun');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction toggle_fun() {\n\t\t\t\n\t\t\tvar x = document.getElementById('code_fun');\n\t\t\tvar y = document.getElementById('code_src');\n\t\t\tif (x.style.display === 'none') {\n\t\t\t\tx.style.display = 'block';\n\t\t\t\ty.style.display = 'none';\n\t\t\t\tload_fun();\n\t\t\t} else {\n\t\t\t\tx.style.display = 'none';\n\t\t\t}\n\t\t}\n\t</script>\n\t\n\t\n\t{fun_blog_code}\n\n\t<div class=\"code_embed_wrap\" id=\"code_fun\" style=\"display:none;\"><!--\trun program\t-->\n\t\t<div class=\"code_embed\">\n\t\t\t<a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\" class=\"raw_src\">View fullscreen</a>\n\t\t\t<div class=\"loading\" id=\"loading_pct\">Loading...Please wait...^.^=</div>\n\t\t\t<script id=\"gamecake_init_lua\" type=\"text/lua\" >--<![CDATA[\n\n\t\t\tlocal hx,hy,ss=128,128,3\n\n\t\t\tlocal opts={\n\t\t\t\ttimes=true, -- request simple time keeping samples\n\n\t\t\t\twidth=hx*ss,\t-- display basics\n\t\t\t\theight=hy*ss,\n\t\t\t\tscreen_scale=ss,\n\t\t\t--\tshow=\"full\",\n\t\t\t\ttitle=\"fun\",\n\t\t\t\tstart=\"wetgenes.gamecake.fun.main\",\n\t\t\t\tfun=\"start\",\n\t\t\t\tfps=60,\n\t\t\t\t... -- include commandline opts\n\t\t\t}\n\n\t\t\tmath.randomseed( os.time() ) -- try and randomise a little bit better\n\n\t\t\toven=require(\"wetgenes.gamecake.oven\").bake(opts).preheat()\n\n\t\t\treturn oven:serv()\n\n\t\t--]]></script>\n\n\n\t\t\t<div id=\"gamecake_container\">\n\t\t\t\t<canvas id=\"gamecake_canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\n\t\t\t\t\t\tvar gamecake_post;\n\t\t\t\t\t\tvar Module;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar resize=function(){\n\t\t\t\t\t\t\tvar e=document.getElementById(\"gamecake_container\");\n\t\t\t\t\t\t\tvar w=parseFloat(window.getComputedStyle(e).width);\n\t\t\t\t\t\t\tvar h=parseFloat(window.getComputedStyle(e).height);\n\t\t\t\t\t\t\tModule.setCanvasSize(w,h);\n\t\t\t\t\t\t\tif(gamecake_post)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").hardcore.resize(nil,'+w+','+h+')');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar gamecake_start=function() {\n\n\t\t\t\t//initialise lua\n\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','require(\"wetgenes.win\").emcc_start({})');\n\n\t\t\t\t// create a pulse function and call it every frame\n\t\t\t\t\t\t\tvar pulse;\n\t\t\t\t\t\t\tvar resize_wait=16;\n\t\t\t\t\t\t\tpulse=function() {\n\t\t\t\t\t\t\t\trequestAnimationFrame(pulse); // we need to always ask to be called again\n\t\t\t\t\t\t\t\tgamecake_post('cmd=lua\\n','return gamecake_pulse()');\n\t\t\t\t\t\t\t\tif(resize_wait>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(--resize_wait==0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"resioz\");\n\t\t\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trequestAnimationFrame(pulse); // start the updates\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar show_progress=function(n)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.show_progress_max=window.show_progress_max || 0;\n\t\t\t\t\t\t\tif(window.show_progress_max<n) { window.show_progress_max=n; }\n\t\t\t\t\t\t\tvar pct=Math.floor(100*(1-(n/window.show_progress_max)));\n\t\t\t\t\t\t\tconsole.log(\"GameCake Loading \"+pct+\"%\");\n//\t\t\t\t\t\t\tvar x = document.getElementById('loading_pct');\n//\t\t\t\t\t\t\tx.innerHTML = \"GameCake Loading \"+pct+\"%\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunction load_fun() {\n\t\t\t\t\t\t\tload_fun=function(){\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\twindow.addEventListener(\"resize\",resize);\n\t\t\t\t\t\t\tModule={};\n\t\t\t\t\t\t\tModule.canvas=document.getElementById(\"gamecake_canvas\");\n\t\t\t\t\t\t\tModule.canvas_resize=resize;\n\t\t\t\t\t\t\tModule.memoryInitializerPrefixURL=\"{_root}exe/\";\n\t\t\t\t\t\t\tModule['_main'] = function() {\n\t\t\t\t\t\t\t\tgamecake_post = Module.cwrap('main_post', 'int', ['string','string']);\n\t\t\t\t\t\t\t\tgamecake_start();\n\t\t\t\t\t\t\t\tresize();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"preInit\"] = function() {\n\t\t\t\t\t\t\t\tFS.mkdir(\"/lua\");\n\t\t\t\t\t\t\t\tFS.createPreloadedFile('/', \"start.fun.lua\", \"{_dirname}/{_blog_post_json.fun_file}\", true, false);\n\t\t\t\t\t\t\t\tFS.writeFile( \"/lua/init.lua\" , document.getElementById(\"gamecake_init_lua\").innerHTML );\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tModule[\"monitorRunDependencies\"]=show_progress;\n\n\n\t\t\t\t\t\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\t\t\t\t\t\t// space and arrow keys\n\t\t\t\t\t\t\t\tif([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar script = document.createElement('script');\n\t\t\t\t\t\t\tscript.src = \"{_root}exe/gamecake.js\";\n\n\t\t\t\t\t\t\tdocument.head.appendChild(script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>\n\n</div>\n",
 "fun_blog_link": "\n<div class=\"blog_link_wrap\">\n\t<div class=\"blog_embed_head\">\n\t\tCheckout the Fun64 <a href=\"{_dirname}/{_blog_post_json.fun_file}\">lua source file</a> or view the result <a href=\"{_root}run/?url={_dirname}/{_blog_post_json.fun_file}\">fullscreen</a>.\n\t</div>\n\t{fun_blog_code}\n</div>\n",
 "head": "<title>{title}</title>\n<style>\n{css}\n</style>\n<script\tsrc=\"{_root}js/jquery-3.1.1.min.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/prettify.js\" ></script>\n<script\tsrc=\"{_root}js/google-code-prettify/lang-lua.js\" ></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{_root}js/google-code-prettify/skins/sons-of-obsidian.css\" />",
 "html": "<html>\n<head>{head}</head>\n<body>{body}{footer}</body>\n</html>",
 "link_newer_page": "<a href=\"{_it}\">Newer posts</a>\n\n",
 "link_newer_post": "<a href=\"{_it}\">Newer post</a>\n\n",
 "link_older_page": "<a href=\"{_it}\">Older posts</a>\n",
 "link_older_post": "<a href=\"{_it}\">Older post</a>\n",
 "this_chunk_is_not_used": "<div class=\"blog_wrap\">\n\t<div class=\"blog_info\"><a href=\"{_dirname}\">{_blog_post_json.title}</a> by {_blog_post_json.author} on {_blog_post_json.datedash}</div>\n\t{_blog_post_body}\n\t{_blog_post_json.fun_file&fun_blog_link}\n</div>\n",
 "title": "Fun64 updates"
}